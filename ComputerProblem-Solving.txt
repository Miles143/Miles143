// Computer Problem-Solving //



Notes:
	In the Problem-Solving process, there are three phases: the algorithm
development phase(Analyze, Propose algorithm, Test algorithm), the implementation 
phase(Code, Test), and the maintenance phase(Use, Maintain). The output from the 
algorithm development phase is a plan for a solution. The output from the implementation
phase is a working pc program that implements the algorithm, the actual solution to the 
problem. The maintenance phase has zero outputs unless there is an error, if you the solution
is sent back to the first phase.

// Following an Algorithm //



Notes:
	To be an algorithm the steps must solve a problem.

// Developing an Algorithm //



Notes:
	Top-down design(functional decomposition), and Object-Oriented design.
Top-down design starts by breaking the problem into a set of subproblems, then 
each problem is divided into subproblems, directly creating a hierarchical structure,
a tree structure of problems and subproblems called modules. Modules can call on services
of modules at lower levels. One module for example could read data values, another could
sum data values, and another could print data values, while comparing overall entire sums.
A module that needs to be expanded is called an abstract step. A step that does not need to
be expanded is called a concrete step. In This example the levels of this particular forest
is as follows the "Levels 0-12" explaining clearly the steps of this program,
second, all modules are functionally titled with proper parameters. Also relatively is the file titled 
"ObjectOrientation-Relationships_between_Classes.txt" is incorporated and sited "Object-Oriented Design Methodology" by 
unknown author on 7/6/25 by PMM.	
	
	
LEGEND:
	''=Identifiers
		syntax=javascript
			semantics=mathamatic equations calculations


		  'Class' Linear Equation 												} Level 0 // Prompt *keyword
			   3𝑥 + 2𝑦 = 6														// Filtering
			 (Fwd=CRC Header:3𝑥 + 2𝑦 = 6)
			 (Encapsulation:3𝑥 + 2𝑦 = 6)
	 ↓←←←←←←←←←←←←←←←(Parameter:pass 3𝑥 to ''Class' Solve for 𝑥', 
	 | 			then pass +2𝑦=6 to 'Solve for 𝑦 substitute 𝑦 for...')
	 |		 (Container Objects: 3𝑥, +2𝑦=6)	
	 |		     (Major)
	 ↓			↓
'Class' Solve for 𝑥		| 
(Fwd=CRC Header:3𝑥)		|
(Encapsulation:3𝑥)		|
(Parameter:pass 3𝑥 to 		|
''Method Solve for 𝑥		|
substitute x for...')		|
(Container Objects:3𝑥)		|
     (Major)			|
	↓			|
	↓			|
	↓_______________________|_____________________________________________
'Method' Solve for 𝑥	     Solve for 𝑦 		     		Plot pairs on Graph						} Level 1 // Write/While/Get, What-if
substitute 𝑥 for...	     	substitute 𝑦 for...	      	      	      	 |								//Control structures
(Fwd=CRC Header:3𝑥)	     	(Fwd=CRC Header:+2𝑦=6)			      	 |
(Encapsulation:3𝑥)		(Encapsulation:+2𝑦=6)			      	 |
(Parameter:3𝑥)		 	(Parameter:substitute 𝑦 for 0, pass +2(0)=6)  	 |
(Encapsulation:pass 3𝑥 to	(Encapsulation:pass +2𝑦=6 to 			 |
''Method' simplify equation'		'simplify equation')	      		 |
(Algorithm:Responsibility	(Algorithm:Responsibility		      	 |
Algorithm)			Algorithm)				      	 |
(Container Objects:3𝑥)		(Container Objects:0, 2𝑦=6)			 |	
    (Major)			     (Major)	
       |				|				      	 |
       |		       	        |				      	 |
       |				|			      	      	 |
       ↓				↓			      	      	 ↓		
'Method' simplify equation   	simplify equation		      	      	 |							} Level 2 = // Put
(Fwd=CRC Header:3𝑥)	     	(Fwd=CRC Header:+2𝑦=6, 𝑦=0)	    	      	 |
(Encapsulation:3𝑥)		(Encapsulation:+2𝑦=6, 𝑦=0)		      	 |
(Parameter:pass 3𝑥)		(Parameter:pass +2(0)=6)	              	 |
(Encapsulation:pass 3𝑥 to 	(Encapsulation:pass =6 to 	 	      	 |
  'Method' multiply to get		''Method' multiply to get)		 |
	variable on one side.')				variable on one side.')	 |
(Algorithm:Responsibility	(Algorithm:Responsibility		      	 |
Algorithm)			Algorithm)				      	 |
    (Minor)			     (Minor)					 |
       |				|			      	       	 |
       ↓				↓			      	      	 ↓
'Method' multiply to get  	'Method' multiply to get            	      	 |
variable on one				variable on one side.	      	      	 |
side.		   	   	   	(Fwd=CRC Header:=6)		      	 ↓							} Level 3 = // If
(Fwd=CRC Header:3𝑥)		   	(Encapsulation:=6)		      	 |								   // Control structures
(Parameter:multiply 1/3·3𝑥/1, pass 𝑥)	(Paramter:multiply 1/3·6/1, pass 2)   	 |
(Encapsulation:pass 𝑥)			(Encapsulation: pass 2 to )		 |
(Algorithm:Responsibility Algorithm)		''Field' add output from	 |
(Encapsulation:pass 𝑥 to 				multiplication,')	 |
	''Field' add output from	(Algorithm:Responsibility Algorithm)	 |
		multiplication,')	     (Minor)	 			 |
     (Minor)					|	   	   	   	 |
	|					↓	   	  	   	 | 
	↓					↓			   	 |
	↓					↓			   	 |
        ↓         		    		↓      	      	     	      	 |
       	→----------------->'Field' add output from			      	 ↓ 							} Level 4 = // Read/Write
		                     multiplication,			      	 |
				(Fwd=CRC Header)𝑥=(2,0)	 <-----(Major)		 |
				(Encapsulation)𝑥---------------------->Plot 𝑥=(2,0) on Graph <-----(Minor)					} Level 5 = // Containment & Onscreen/Output
				(Parameter:𝑥=(2,0))
				(Encapsulation:pass 3𝑥 + 2𝑦 = 6 to 'Solve for 𝑦')
				(Algorithm:Responsibility Algorithm)
				     (Major)
					↓								
					↓
			   	   Solve for 𝑦
				   (Fwd=CRC Header:3𝑥 + 2𝑦 = 6)
				   (Encapsulation:pass 3𝑥 + 2𝑦 = 6 to '3𝑥 + 2𝑦 = 6')
				   (Parameter:3𝑥 + 2𝑦 = 6, pass 3𝑥 + 2𝑦 = 6)
				   (Encapsulation:pass 3𝑥 + 2𝑦 = 6 to '3𝑥 + 2𝑦 = 6')
				   (Algorithm:Responsibility Algorithm)									} Level 6 = // Prompt
				     (Major)
					↓
					↓
			   	   3𝑥 + 2𝑦 = 6												} Level 6 = // Prompt
					↓
    		    	'Class' Solve for 𝑦												} Level 7 = // Prompt
		     	    (Fwd=CRC Header:3𝑥 + 2𝑦 = 6)												// Filtering
		     	    (Encapsulation:3𝑥 + 2𝑦 = 6)
			    (Parameter:pass 3𝑥 to ''Method' Solve for 𝑥', then pass +2𝑦=6 to ''Object' Solve for 𝑦')
			    (Encapsulation:3𝑥 + 2𝑦 = 6 to ''Method' Solve for 𝑥', then pass +2𝑦=6 to ''Object' Solve for 𝑦') 
		            (Container Objects: 3𝑥, +2𝑦=6)
			    (Algorithm:Responsibility Algorithm)
			     (Major)
				|										
				|
________________________________↓____________________________________________________________
'Method' Solve for 𝑥    		'Object' Solve for 𝑦		     		Plot pairs on Graph					} Level 8 = // Write/While/Get
substitute 𝑥 for...		    	substitute 𝑦 for...                   		      |							   // Control structures
(Fwd=CRC Header:3𝑥)	  	    	   (Fwd=CRC Header:+2𝑦=6)			      |
(Encapsulation:3𝑥)         		   (Encapsulation:+2𝑦=6)				      |
(Parameter:substitute 𝑥 for 0, pass 3(0))  (Parameter:pass +2𝑦=6)			      |
(Container Objects:3𝑥, 0)      		   (Container Objects:+2𝑦=6)			      |
(Encapsulation:pass 3𝑥 to		   (Encapsulation:pass +2𝑦=6 to     		      |
 ''Method' simplify equation')				''Method' simplify equation')         |
    (Major)				     (Major)					      |
       ↓					↓					      |
       ↓				   	|			      		      |
       |					↓					      |
       | 					|					      |      	      
       ↓ 					↓			      	      	      |
'Method' simplify equation 		'Method' simplify equation	      	      	      |						} Level 9 = // Put
(Fwd=CRC Header:3𝑥, 𝑥=0)      	    		(Fwd=CRC Header:+2𝑦=6)			      |
(Encapsulation:3𝑥)		    		(Encapsulation:+2𝑦=6)			      |
(Parameter: pass 3(0))				(Parameter:pass +2𝑦=6)			      |
(Encapsulation:pass 0 to ''Method		(Encapsulation:pass +2𝑦=6 to		      |
multiply to get variable on one side')			''Method' multiply to get	      |
(Algorithm:Responsibility Algorithm)				variable on one side')	      |
    (Minor)					(Algorithm:Responsibility Algorithm)	      |
       |					     (Minor)	
       |						|			              |
       |						|				      |
       | 						|			      	      |
       |						|			      	      ↓						} Level 10 = // If
       |                        			|			      	      |							    // Control structures
'Method' multiply to get 		'Method' multiply to get             	      	      |
variable on one		  			variable on one 		      	      |
side.			  			side.				      	      ↓
(Fwd=CRC Header:0)	  			(Fwd=CRC Header:+2𝑦=6)			      |
(Encapsulation:0)		  		(Encapsulation:+2𝑦=6, 1/2·2𝑦/1=6/1·1/2)	      |
(Parameter:pass 0 to				(Parameter:multiply 1/2·2𝑦/1=6/1·1/2, pass 3) |
''Field' add output from multiplication'	(Encapsulation:pass 3 to 		      |
(Encapsulation:pass 0 to				''Field' add output from 	      |
''Field' add output from multiplication				multiplication'		      |
(Algorithm:Responsibility Algorithm)		(Algorithm:Responsibility Algorithm)	      |
	     (Minor)				     (Minor)
		↓					↓				      |	
		↓					↓				      |
		↓					|				      |
		↓					|			      	      |
		↓					|				      |
		↓					|			      	      |
		↓					|			      	      |
                ↓                			↓ 				      |
	     	→→→→→→→→→→→→→→→→→→→→→→→→'Field' add output from	 	              	      | 					} Level 11 = // Read/Write
		     				multiplication,			      	      ↓ 
						(Fwd=CRC Header:𝑦=(0,3))	 <-----(Major)	      ↓
						(Encapsulation:𝑦=(0,3))			      ↓
						(Parameter: plot 𝑦=(0,3))𝑦---------------->Plot 𝑦=(0,3) pairs on Graph <-----(Minor)	} Level 12 = Containment & Onscreen/Output
						(Algorithm:Responsibility Algorithm)