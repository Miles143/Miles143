!#/bin/bash

import scapy;

$echo on

send(IP(dst="10.10.10.1")/ICMP())
sendp("I'm NikkiBB travelling my see throughNET", ttl=(1,4)), iface="eth1")
sendp(rdpcap("/tmp/pcapfile")) #tcpreplay
send(IP(dst='127.0.0.1'), return_packets=True)
____________________________________________
conf.checkIPaddr = False # answer IP will be != from the one we requested
sr(IP(dst="225.0.0.1%eth1")/ICMP(), multi=True)
sr(IPv6(dst="ff02::1%eth1")/ICMPv6EchoRequest(), multi=True)
__________________________________________________________
pkt = IP(dst=ScopedIP("225.0.0.1", scope=conf.iface))ICMP()
send(IP(dst="target")/fuzz(UDP()/NTP(version=4)),loop=2)
______________________________________________________
pkt = IP(len=RawVal(b'NikkiBB"), src="255.0.0.1")
bytes(pkt)
_______________________________________________
p = sr1(IP(dst="www.icloud.com")/ICMP()/"XXXXXXXXXX")
p
p.show()
___________________________________________________
sr1(IP(dst="192.168.1.999")/UDP()/DNS(rd=1,qd=DNSQR(qname="www.icloud.com")))
_________________________________________________________________________
sr(IP(dst="192.168.1.999")/TCP(dport=[21,22,23]))
ans, unans = _
ans.summary()
______________________________________________
sr(IP(dst="192.168.1.999/30")/TCP(dport=[21,22,23]),inter=0.2,retry=-2,timeout=1)
_______________________________________________________________________________
sr1(IP(dst="192.168.1.999")/TCP(dport=80,flags="S"))
_________________________________________________
sr(IP(dst="192.168.1.999")/TCP(sport=666, dport(440,443),flags="S/A"))
______________________________________________________________________
sr(IP(dst="192.168.1.999")/TCP(sport=RandShort(), dport=[440,441,442,443], flags="S"))
____________________________________________________________________________
ans, unans = _
ans.summary()
ans.summary( lambda s,r: r.sprintf("%TCP.sport% \t %TCP.flags%") )
ans, unans = sr(IP(dst=["192.168.1.999", "www.Microsoft.com", "www.icloud.com"])/TCP(dport=[22,80,443],flags="S"))
_____________________________________________________________________________
ans.make_table(
	lambda s,r: (s.dst, s.dport,
	r.sprintf("{TCP:%TCP.flags%}{ICMP:%IP.src% - %ICMP.type%}")))
_________________________________________________________________
ans.nsummary(lfilter = lambda s,r: r.sprintf("%TCP.flags%") == "SA")
__________________________________________________________________
ans.summary(lfilter = lambda s,r: r.sprintf("%TCP.flags%") == "SA",prn=lambda s,r: r.sprintf("%TCP.sport% is open"))
_____________________________________________________________________________
ans.filter(lambda s,r: TCP in r and r[TCP].flags&2).make_table(lambda s,r:
	(s.dst, s.dport, "X"))
_____________________________________________________________________________
report_ports("192.168.1.999",(440,443))
____________________________________
ans, unans = sr(IP(dst=target, ttl=(4,25),id=RandShort())/TCP(flags=0x2))
______________________________________________________________________
for snd, rcv in ans:
	print snd.ttl, rcv.src, isinstance(rcv.payload, TCP)
__________________________________________________________

