// Memory Management, Page Memory Management//



Notes:
	A logical address (is sometimes called a virtual or relative address)
	is a value that specifies a generic location, relative to the program
	but not to the reality of main memory.
	
	A physical address is an actual address in the main memory device.

	When a program is compiled, a reference to an identifier(such as a variable
	name) is changed to a logical address. When the program is eventually loaded
`	into memory, each logical address finally corresponds to a specific physically
	address. The mapping of a logical address to a physical address is called address
	binding. 

	Single Contiguous Memory Management the operating system gets what it needs, and
	the program is allocated the rest.
	In this memory management scheme, a logical address is simply an integer value 
	relative to the starting point of the program. To produce a physical address
	we add a logical address to the starting address of the program in a physical
	main memory.
	If the program is loaded starting at address A, then the physical address coorespoding
	to logical address L is A+L. Lets say the starting address is 555555, and the program
	uses a relative address of 222222, we then know that the actual address is 777777 in the
	physical main memory.
	
	There are two strategies used to partition memory: fixed partitions, main memory is divided
	into particular number of partitions.
	Dynamic partitions, are created to fit the need of the programs.
	A logical address is an integer relative to a starting point of zero.
	The beginning of the programs partition is in the base register.
	The length of the partition is stored in the bounds register.
	The value of the logical address is added to the value in the base register
	to produce the physical address. 

	Paged memory management puts much more burden in the os to keep track of allocated
	memory and to resolve addresses. In this technique, main memory is divided into small
	fixed-size blocks of storage called frames. A process is divided into pages that we 
	assume are the same size as a frame. When a program is to be executed, the pages of the
	process are loaded into various unused frames distributed through memory. To keep track
	of all this , the os maintains a seperate page-map table (PMT) for each process in memory:
	it maps each page into the frame in which it is loaded. Both pages and frames are numbered
	starting with zero. 
	
	A logical address in a paged memory management system begins as a single integer value relative
	to the starting point of the program, as it was in a partitioned system. This address is modified	<-----IMPORTANT NOTE
	into two values, a page number and an offset, by dividing this address by the page-size. The page
	number is the number of times the page-size divides the address, and the remainder is the offset.
	So, the logical address of 2566, with a page-size of 1024, corresponds to the 518th byte of page 2
	of the process, and is often written as <page, offset>, such as <2, 518>. 
	To produce a physical address, you first look up the page in the PMT to find the frame number. Next,	<----IMPORTANT NOTE
	multiply the frame number by the frame-size and add the offset to the physical address.
		Ex:
			if process 1 is active, a logical address of <1, 222> would be processed as follows:
				Page 1 of process 1 is in frame 12; therefore, the corresponding physical address
				12*1024+222 or 12510.	<-----IMPORTANT NOTE
	
		Note:
			there are two ways in which a logical address could be invalid: The page number could be
			out of bounds for that process, or the offset could be larger that the size of a frame.
			
			To much page swapping(the idealism of bringing a page from secondary memory, which causes
				another page to be written to secondary memory is called page-swap) is called thrashing
				and can seriously degrade the os performance.

	 